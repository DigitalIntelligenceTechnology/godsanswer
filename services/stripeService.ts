/**
 * =================================================================================================
 * THIS SERVICE SIMULATES CALLING A BACKEND TO CREATE A STRIPE CHECKOUT SESSION.
 *
 * In a live application, this function would make a `fetch` request to your own server.
 * The server would then use the Stripe Node.js library with a secret key to create the session
 * and return the `sessionId` to the client. The client then uses this ID to redirect to Stripe.
 *
 * WHY IS A BACKEND REQUIRED?
 * Creating a Checkout Session requires your Stripe Secret Key, which must NEVER be exposed
 * on the frontend. A backend server keeps this key safe.
 * =================================================================================================
 *
 * ACTION REQUIRED: Create a backend endpoint. Below is a complete example using Node.js and Express.
 *
 * 1. SET UP YOUR NODE.JS BACKEND:
 *    - `npm install express stripe`
 *    - Create a file (e.g., `server.js`).
 *    - Add the code below to that file.
 *    - Run it with `node server.js`.
 *
 * 2. REPLACE THE SIMULATION BELOW:
 *    - Comment out or delete the `new Promise` simulation.
 *    - Uncomment the `fetch` call and point it to your backend's URL.
 *
 * --- NodeJS & Express Backend Example (`server.js`) ---
 *
 * const express = require('express');
 * const Stripe = require('stripe');
 * // It's best to use environment variables for your secret key and domain.
 * const stripe = Stripe('sk_test_YOUR_STRIPE_SECRET_KEY'); // Replace with your secret key
 * const app = express();
 * app.use(express.json());
 *
 * // IMPORTANT: Add CORS middleware if your frontend and backend are on different domains
 * // const cors = require('cors');
 * // app.use(cors({ origin: 'YOUR_FRONTEND_URL' }));
 *
 * app.post('/api/create-checkout-session', async (req, res) => {
 *   const { priceId } = req.body;
 *
 *   if (!priceId) {
 *     return res.status(400).send({ error: 'Price ID is required' });
 *   }
 *
 *   try {
 *     const session = await stripe.checkout.sessions.create({
 *       payment_method_types: ['card'],
 *       line_items: [
 *         {
 *           price: priceId,
 *           quantity: 1,
 *         },
 *       ],
 *       mode: 'subscription', // or 'payment' for one-time charges
 *       // IMPORTANT: Replace these with your actual frontend URLs
 *       success_url: `http://localhost:3000?payment_success=true`, // The URL to redirect to on success
 *       cancel_url: `http://localhost:3000`,    // The URL to redirect to on cancellation
 *     });
 *
 *     res.json({ sessionId: session.id });
 *   } catch (error) {
 *     console.error('Error creating Stripe session:', error);
 *     res.status(500).send({ error: 'Could not create payment session' });
 *   }
 * });
 *
 * const PORT = 4242;
 * app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
 *
 */

interface CheckoutSessionResponse {
  sessionId?: string;
  error?: string;
}

/**
 * Simulates creating a Stripe Checkout session and returns a session ID.
 * Replace the simulation with a real fetch call to your backend.
 *
 * @param {string} priceId - The ID of the Stripe Price object.
 * @returns {Promise<CheckoutSessionResponse>} A promise that resolves with the session details.
 */
export const createCheckoutSession = (priceId: string): Promise<CheckoutSessionResponse> => {
  
  // --- REAL IMPLEMENTATION (UNCOMMENT THIS) ---
  /*
  return fetch('/api/create-checkout-session', { // Use your backend's full URL if on a different domain
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ priceId }),
  })
  .then(res => {
    if (!res.ok) {
      // If server returns an error, read it as text and throw an error.
      return res.text().then(text => { throw new Error(text || 'Failed to create session') });
    }
    return res.json();
  })
  .then(data => {
    if (!data.sessionId) {
      throw new Error('Invalid session ID received from server.');
    }
    return { sessionId: data.sessionId };
  })
  .catch(err => {
    console.error("Stripe service error:", err);
    return { error: err.message };
  });
  */
  
  // --- SIMULATION (DELETE OR COMMENT OUT THIS PART ONCE YOUR BACKEND IS READY) ---
  return new Promise((resolve) => {
    console.log(`Simulating backend call to create Stripe session for price ID: ${priceId}`);

    // Simulate network delay
    setTimeout(() => {
      if (priceId.includes('XXXX')) {
          const errorMsg = 'Payment failed: Please replace the placeholder Stripe Price IDs in `components/Payment.tsx` with your actual IDs.';
          console.error(errorMsg);
          resolve({ error: errorMsg });
      } else {
        // In a real scenario, this ID would be generated by your backend.
        const fakeSessionId = 'cs_test_a1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
        console.log(`Successfully simulated session creation. Session ID: ${fakeSessionId}`);
        resolve({ sessionId: fakeSessionId });
      }
    }, 1500);
  });
};